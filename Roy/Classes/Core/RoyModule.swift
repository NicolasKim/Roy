import Foundation/// Global Roy settingpublic class RoyModuleConfig {    static public let sharedInstance = RoyModuleConfig()    private var s = "roy"    /// scheme    public var scheme: String {        get {            return s        }        set {            s = newValue        }    }    public func getFullURL(urlWithoutScheme:String) -> String{        return "\(self.scheme)://\(urlWithoutScheme)"    }}public enum RoyLoadModuleMode : String {    //This mode Module will call '-init(host:)' when you use the url belong to this module ,    case Lazily="eRoyLoadModuleModeLazily"    //This mode Module will call '-init(host:)' immediately, when you invoke RoyAppDelegate.addModuleClass,    case Immediately="eRoyLoadModuleModeImmediately"}public protocol RoyModuleProtocol: UIApplicationDelegate {        /// The host host    var moduleHost: String { get }    /// The host mapping to Module    ///    /// - Returns: host    static func host()->String	    init(host: String)    /// 注册任务    ///    /// - Parameters:    ///   - path: 任务对应的path，也就是任务名称    ///   - task: 任务    ///   - paramValidator: 参数验证器    /// - Returns: 注册任务结果    func addRouter(path: String, task: @escaping RoyTaskClosure, paramValidator: RoyValidatorProtocol.Type?) -> Bool    /// 加载方式    ///    /// - Returns: 加载方式    static func loadModuleMode()->RoyLoadModuleMode}public extension RoyModuleProtocol {    /// 注册任务    ///    /// - Parameters:    ///   - path: 任务对应的path，也就是任务名称    ///   - task: 任务    ///   - paramValidator: 参数验证器    /// - Returns: 注册任务结果    public func addRouter(path: String, task: @escaping RoyTaskClosure, paramValidator: RoyValidatorProtocol.Type?) -> Bool {        let urlString = "\(RoyModuleConfig.sharedInstance.scheme)://\(moduleHost)/\(path)"        return RoyR.global.addRouter(url: urlString, paramValidator: paramValidator, task: task)    }    public static func loadModuleMode() -> RoyLoadModuleMode {    	return .Lazily    }}public extension RoyR{    open func addRouter(urlWithoutScheme:String , task:@escaping RoyTaskClosure,paramValidator:RoyValidatorProtocol.Type?,inQueue queue:OperationQueue) -> Operation{         return self.addRouter(url: RoyModuleConfig.sharedInstance.getFullURL(urlWithoutScheme: urlWithoutScheme), task: task, paramValidator: paramValidator, inQueue: queue)    }    open func addRouter(urlWithoutScheme:String ,paramValidator:RoyValidatorProtocol.Type? , task:@escaping RoyTaskClosure) -> Bool{         return self.addRouter(url: RoyModuleConfig.sharedInstance.getFullURL(urlWithoutScheme: urlWithoutScheme), paramValidator: paramValidator, task: task)    }    open func route(urlWithoutScheme:String , param : [String:Any]?) -> Any?{        if let u = URL(string: RoyModuleConfig.sharedInstance.getFullURL(urlWithoutScheme: urlWithoutScheme)) {            return self.route(url:u , param : param)        }        return nil    }    open func route(urlWithoutScheme:String , param : [String:Any]?  , task:RoyReturnClosure?) -> Operation{        if let u = URL(string: RoyModuleConfig.sharedInstance.getFullURL(urlWithoutScheme: urlWithoutScheme)) {            return self.route(url: u, param: param, task: task)        }        return Operation()    }}