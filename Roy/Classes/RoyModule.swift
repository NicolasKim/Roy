import UIKitpublic protocol RoyModuleProtocol : UIApplicationDelegate {    var scheme              : String {get  set}    var moduleHost          : String {get  set}        init(appScheme : String,host : String)        func route(path:String ,param : [String:Any]?  , task:@escaping RoyReturnClosure) -> Bool        func viewController(path:String,param:[String:Any]?) -> RoyProtocol?}open class RoyModule : NSObject, RoyModuleProtocol {    public var scheme      : String    public var moduleHost        : String        public required init(appScheme: String, host: String) {        scheme            = appScheme        moduleHost        = host        super.init()    }        open func addRouter(path:String , task:@escaping RoyTaskClosure) -> Bool {        let urlString = "\(self.scheme)://\(moduleHost)/\(path)"        let url = URL(string: urlString)        return RoyGlobal.instance.addRouter(url: url!, task: task)    }    open func route(path:String ,param : [String:Any]?  , task:@escaping RoyReturnClosure) -> Bool {        let urlString = "\(self.scheme)://\(moduleHost)/\(path)"        let url = URL(string: urlString)        return RoyGlobal.instance.route(url: url!, param: param, task: task)    }        open func addRouter(path:String , viewController : RoyProtocol.Type) -> Bool{        let urlString = "\(self.scheme)://\(moduleHost)/\(path)"        let url = URL(string: urlString)        return RoyGlobal.instance.addRouter(url: url!, viewController: viewController)    }        open func viewController(path:String,param:[String:Any]?) -> RoyProtocol?{        let urlString = "\(self.scheme)://\(moduleHost)/\(path)"        let url = URL(string: urlString)        return RoyGlobal.instance.viewController(url: url!, param: param)    }}